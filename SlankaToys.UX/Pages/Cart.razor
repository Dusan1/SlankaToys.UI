@using System
@using SlankaToys.UX.Services
@using SlankaToys.UX.Models.Requests
@inject HttpClient Http
@inject ToastService toastService

@page "/cart/{userId:int}"
@if (cartModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h6 class="pull-right">@cartModel.Date</h6>
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">

    <div class="container">
	<table id="cart" class="table table-hover table-condensed">
    				<thead>
						<tr>
							<th style="width:50%">Product</th>
							<th style="width:10%">Price</th>
							<th style="width:8%">Quantity</th>
							<th style="width:22%" class="text-center">Subtotal</th>
							<th style="width:10%"></th>
						</tr>
					</thead>
					<tbody>
                     @foreach (var item in cartModel.Items)
                     {
						<tr>
							<td data-th="Product">
								<div class="row">
									<div class="col-sm-2 hidden-xs product-box"><img src="/images/@item.ImageFileName" alt="Image"></div>
									<div class="col-sm-10" style="padding-left:50px;">
										<h4 class="nomargin">@item.ProductName</h4>
										<p>@item.ProductName</p>
									</div>
								</div>
							</td>
							<td data-th="Price">$@item.Price</td>
							<td data-th="Quantity">
								<input type="number" class="form-control text-center" @oninput="(e)=> item.QuantityForView = e.Value.ToString()" value="@item.Quantity">
							</td>
							<td data-th="Subtotal" class="text-center">@item.TotalPrice</td>
							<td class="actions" data-th="">
								<button @onclick="@(() => UpdateCart(item.ProductId, cartModel.CartId, item.QuantityForView))" class="btn btn-info btn-sm"><i class="fa fa-refresh">
									   </i></button>
								<button class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i></button>								
							</td>
						</tr>
                        }
					</tbody>
					<tfoot>
						@*<tr class="visible-xs">
							<td class="text-center"><strong>Total $@cartModel.Items.Sum(i => i.TotalPrice)</strong></td>
						</tr>*@
						<tr>
							<td><a href="#" class="btn btn-warning"><i class="fa fa-angle-left"></i> Continue Shopping</a></td>
							<td colspan="2" class="hidden-xs"></td>
							<td class="hidden-xs text-center"><strong>Total $@cartModel.Items.Sum(i => i.TotalPrice)</strong></td>
							<td><a href="#" class="btn btn-success btn-block">Checkout <i class="fa fa-angle-right"></i></a></td>
						</tr>
					</tfoot>
				</table>
</div>

}

@code {
    [Parameter]
    public int UserId { get; set; }

    private CartModel cartModel;

    protected override async Task OnInitializedAsync()
    {
        cartModel = await Http.GetFromJsonAsync<CartModel>($"cart/{UserId}");
    }


    public class CartItemModel
    {
        public string ProductName { get; set; }
        public string QuantityForView { get; set; }
        public decimal Price { get; set; }

        public int Quantity { get; set; }

        public decimal TotalPrice => Price * Quantity;

        public string ImageFileName { get; set; }
        public int ProductId { get; set; }
    }

    public class CartModel{
        public DateTime Date { get; set; }
        public int CartId { get; set; }
        public List<CartItemModel> Items { get; set; }
    }

    public async Task UpdateCart(int productId, int cartId, string quantity)
    {
        var request = new UpdateCartRequestModel() { ProductId = productId, Quantity = int.Parse(quantity), CartId = cartId };
        var response = await Http.PutAsJsonAsync("cart", request);
        try
        {
            string d = await response.Content.ReadAsStringAsync();
            toastService.ShowToast(d, ToastType.Success);
        }
        catch (Exception ex)
        {
            var g = ex;
        }

    }
}
